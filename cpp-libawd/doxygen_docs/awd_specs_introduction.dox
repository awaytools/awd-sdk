/*! \page awd_specs_alpha AWD 3.0 Specifications alpha

# AWD3 Specification

This document descipes the specifications for AWD 3.0 as used in AwayJS November 2014 - January 2015.

The final specs for AWD3.0 are currently under development, and will be part of the updated specifications for AWD (\ref awd_specs)

AWD3 extends the AWD2 Format to support 2D-Shape data for a new AwayJS shape animation runtime.

The first software to support creation of AWD3 data will be FlashProfessional CC 2014(build 14.1.0.30 and later)

## Basic Structure of AWD

An AWD-file contains one AWD-Header \ref awd_pt2_file_header, and a list of AWDBlocks.

All AWD-Blocks have the same Header

Offset | Size | Type              | Description
-------|------|-------------------|-----------------
0      |4     |BlockAddr (uint32) |BlockID
4      |1     |uint8              |Block Namespace Handle
5      |1     |uint8              |Block Type
6      |1     |uint8              |Flags
7      |4     |uint32             |Block Data size in bytes

\ref awd_pt2_9_1

The BlockID is used to link blocks to each other (assign material to mesh etc).

This gives the restriction that a referenced block must occur in the AWD-file before the block that is referencing it.

In AWD we have storage-precision (header-flags define if to read numbers as float32 or float64). For now this specs do not take this into account. E.g. Wherever the datatype float32 is used, it could also be float64. For now, the FlashExporter will always use float32 for encoding numbers.


## AWD3 Block-types

To support all the needed 2D shape data, we will need these blocks to be added to AWD:

Type ID   |Block Type   |AssetType
----------|-------------|--------------
82        |Texture      |TEXTURE
131       |Geometry2D   |GEOMETRY_2D
132       |Fill         |FILL
133       |TimeLine     |TIMELINE
141       |Sound        |SOUND
134       |Textelement  |TEXT_ELEMENT
135       |FontTable	|FONT_TABLE

>	__Changes for final specs:__\n
>	In the final specifiactions for AWD3.0 it will not be neccessary to differ between Geometry2D (id = 131) and TriangleGeometry (id = 1).\n
>	We can use the Triangle-Geometry-Block (id=1) to store Subgeometries that contain streams for 3d-data, and streams for 2d-data.\n
>	The same applies for the Fill-block (id = 132). We can use the Material-Block for this(id = 81).\n


### Texture
Already in AWD2. 
>	\ref awd_pt2_13_2

A texture in AWD2 can be either external (URL) or embed (byte-data).

AWDParser will not parse the texture data, but hand it over to the parsing system, and wait until the paring system has finished loading/parsing the texture.


### Geometry2D

>	__Changes for final specs:__\n
>	In the final specifications, this should be merged into TriangleGeometry-block. \n
>	See \ref awd_pt2_11_1 for more information.\n


This block holds all the shape-data.

Strokes are also converted to shapes (on export).

The structure of Geometry2D is exactly the same as the TriangleGeometry in AWD2. _(AWD2Specs/Part II:File format specifiation//The Data Block concept/Geometry blocks/TriangleGeometry)_

Offset      |Size         |Type                   |Description
------------|-------------|-----------------------|--------------------------
0           |11           |Blockheader            |---
11			|variable	  |varString			  |The name of the shape. FlashPro does not give us any shape-names, but in future we might have editors that asign names to shapes.
variable    |2            |uint16                 |Number of SubGeometry2D
variable    |variable     |NumAttrList            |Geometry2D properties
variable    |variable     |List of SubGeometry2D  |SubGeometry2Ds
variable    |variable     |UserAttrList           |User Atrributes

In AWD, the only difference between a SubGeometry and a SubGeometry2D is in the type of streams they are using.

The Ids of the SubGeometry2D streams:

ID |Stream
---|------------------------------------
1  |Face indices no aliased edges
2  |Face indices one aliased edge
3  |Face indices convex
4  |Face indices concave
5  |Vertex positions

I think we can get rid of the 4 different face-streams, because we define the Face-type as vertex-attribute. (?)

On Export, it is taken care, that non-curved-faces are allowed to share verticles, while curve faces all have their own unique verticle provided.

The spec for the vertex-data stream is work in progress.

At the moment float32 is used for all numbers, but we can enable storage-precision on this

The temp vertex-data that is saved at the moment: 

name       | type
---|------------------------------------
position   | 3 x float32
curve-type	| float32
unused| 2 x float32
curve.u  |float32
curve.v  |float32
red 	 |float32
green 	 |float32
blue 	 |float32
alpha |float32
final specs might look like this:

name       | type
---|------------------------------------
position   | 2 x float32
curve-type	| float32
curve.u  |float32
curve.v  |float32


Each SubGeometry2D can have a property for the UV-Transformation.

This is a Matrix3x2 (TransformMatrix).

If this is ommited, a Identiy Matrix will be used (If needed).


### Fill


>	__Changes for final specs:__\n
>	In the final specifications, this should be merged into Material-block.\n
>	See \ref awd_pt2_13_1 for more information.\n

Fill stores information about color / texture / gradients.

The Timeline-block will connect a shape to a fill (and put it on the "stage").

Also the timeLine-block will apply filters and colorTranforms etc to objects, so no need to store them in fill (not like AWD2 Material methods)

This is pretty much like a AWD Material block. _(AWD2Specs/Part II:File format specifiation//The Data Block concept/Material blocks/Simple Material block)_

For all fills, the texture-atlas stuff is prepared, but not yet finished implemented / exported.

Offset    |Size     |Type         |Description
----------|---------|-------------|-------------------
0         |11       |BlockHeader  |---
11	|variable	|varString	|The name of the fill. FlashPro does not give us any fill-names, but in future we might have editors that asign names to shapes.
variable	|1        |uint8        |Fill-Type
variable |variable |fill-properties-block|content varies with fill-type
variable  |variable |NumAttrList |User Attributes
variable  |variable |UserAttrList |User Attributes


#### Fill Types

ID  |Fill Type
----|------------------
1   |Solid Fill
2   |Textured
3   |Linear gradient
4   |Radial gradient

##### Solid Fill 

Offset    |Size     |Type         |Description    |Default
----------|---------|-------------|---------------|----
0         |4|color    |color  - used as long as textureAtlas is not working         |0xffffff
4   |    4        |BlockAddr          |TextureID(AWD ID of texture)|0
8	|8|List of 2 x float32|TextureAtlas Position - uv.u uv.v - All in percent of total texture (0.0-1.0) |0.5,0.5

##### Textured Fill


Offset    |Size     |Type         |Description    |Default
----------|---------|-------------|---------------|----
0 |    4       |BlockAddr          |TextureID  (AWD ID of texture)|0
4   | 16 |List of 4 x float32|TextureAtlas Position - StartX, StartY, EndX, EndY - All in percent of total texture (0.0-100.0) |0,0,100,100

##### Linear gradient Fill


Offset   |Size     |Type         |Description    |Default
----------|---------|-------------|---------------|----
0   |4|BlockAddr          |TextureID   (AWD ID of texture)|0
4   |1|awd_uint8  |Number of gradients - restricted to max 255|0
5   |variable|list of gradient|list of gradients


##### Radial gradient Fill

Offset    |Size     |Type         |Description    |Default
----------|---------|-------------|---------------|----
0   |4|BlockAddr          |TextureID   (AWD ID of texture)|0
4   |1|awd_uint8  |Number of gradients - restricted to max 255|0
5   |variable|list of gradient|list of gradients

###### Gradient
One gradient is the gradient between 2 colors.  we only need one value (to map to the corresponding row in the textureAtlas).

Offset    |Size     |Type         |Description    |Default
----------|---------|-------------|---------------|----
0|1|uint16|the row of the gradient in the textureAtlas (0-511) |0

### TimeLine

>	__Changes for final specs:__\n
>	For the final implementation i suggest one change to the specification of timeline.\n
>	At the moment, a timeline can only be finalilized on import, after all frames of all timelines are completly parsed.\n
>	I would suggest that we allow Timelines to be merged on import, so that we can load a Movielclips first frame and display this.\n
>	All the other frames would than be stored in another timeline, that can be merged into the "only-first-frame" timeline after parsing.\n
>	This would allow to finalize a movieclip, before all frames of all childrens are parsed.\n

Specifications for Timeline can be found here: \ref awd_pt2_14_7\n




### Sound

The structure of the Sound-Block is the same as the structure of the texture-Block.
They only differ in their Block-ID, and in the type of properties they can have in their properties-list.

>	\ref awd_pt2_15

As with textures, the sound can be present in the file as embed data, or as URL. In either way, the parser will stop parsing the current AWD, hand the sound-data over to the Parsing-system, and wait until processing has finished. 

#####Sound-properties

ID    | Size                 |Type                 |Name        |Description 
----------|---------------------|------------|-----------------|-----------
TODO|TODO|TODO|TODO|TODO



### FontTable
>	Font and font-table havnt yet been exported into AWD files, the specs for this can be found here:\n
>	\ref awd_pt2_16

*/